
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "demos/tutorial_expressivity_fourier_series.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_demos_tutorial_expressivity_fourier_series.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_demos_tutorial_expressivity_fourier_series.py:


Quantum models as Fourier series
================================

.. meta::
    :property="og:description": The class of functions a quantum model can learn is characterized by the structure of its corresponding Fourier series.
    :property="og:image": https://pennylane.ai/qml/_images/scheme.png

.. related::

   tutorial_data_reuploading_classifier Data-reuploading classifier

*Authors: Maria Schuld and Johannes Jakob Meyer â€” Posted: 24 August 2020. Last updated: 15 January 2021.*

.. GENERATED FROM PYTHON SOURCE LINES 19-28

This demonstration is based on the paper *The effect of data encoding on
the expressive power of variational quantum machine learning models* by
`Schuld, Sweke, and Meyer
(2020) <https://arxiv.org/abs/2008.08605>`__ [#schuld2020]_.

.. figure:: ../demonstrations/expressivity_fourier_series/scheme_thumb.png
  :width: 50%
  :align: center


.. GENERATED FROM PYTHON SOURCE LINES 31-37

The paper links common quantum machine learning models designed for
near-term quantum computers to Fourier series (and, in more general, to
Fourier-type sums). With this link, the class of functions a quantum
model can learn (i.e., its "expressivity") can be characterized by the
model's control of the Fourier series' frequencies and coefficients.


.. GENERATED FROM PYTHON SOURCE LINES 40-43

Background
----------


.. GENERATED FROM PYTHON SOURCE LINES 46-65

Ref. [#schuld2020]_ considers quantum machine
learning models of the form

.. math:: f_{\boldsymbol \theta}(x) = \langle 0| U^{\dagger}(x,\boldsymbol \theta) M U(x, \boldsymbol \theta) | 0 \rangle 

where :math:`M` is a measurement observable and
:math:`U(x, \boldsymbol \theta)` is a variational quantum circuit that
encodes a data input :math:`x` and depends on a
set of parameters :math:`\boldsymbol \theta`. Here we will restrict ourselves
to one-dimensional data inputs, but the paper motivates that higher-dimensional
features simply generalize to multi-dimensional Fourier series.

The circuit itself repeats :math:`L` layers, each consisting of a data-encoding circuit
block :math:`S(x)` and a trainable circuit block
:math:`W(\boldsymbol \theta)` that is controlled by the parameters
:math:`\boldsymbol \theta`. The data encoding block consists of gates of
the form :math:`\mathcal{G}(x) = e^{-ix H}`, where :math:`H` is a
Hamiltonian. A prominent example of such gates are Pauli rotations.


.. GENERATED FROM PYTHON SOURCE LINES 68-79

The paper shows how such a quantum model can be written as a
Fourier-type sum of the form

.. math::  f_{ \boldsymbol \theta}(x) = \sum_{\omega \in \Omega} c_{\omega}( \boldsymbol \theta) \; e^{i  \omega x}. 

As illustrated in the picture below (which is Figure 1 from the paper),
the "encoding Hamiltonians" in :math:`S(x)` determine the set
:math:`\Omega` of available "frequencies", and the remainder of the
circuit, including the trainable parameters, determines the coefficients
:math:`c_{\omega}`.


.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. figure:: ../demonstrations/expressivity_fourier_series/scheme.png
  :width: 50%
  :align: center

|


.. GENERATED FROM PYTHON SOURCE LINES 91-107

The paper demonstrates many of its findings for circuits in which
:math:`\mathcal{G}(x)` is a single-qubit Pauli rotation gate. For 
example, it shows that :math:`r` repetitions of a Pauli rotation-encoding 
gate in "sequence" (on the same qubit, but with multiple layers :math:`r=L`) or
in "parallel" (on :math:`r` different qubits, with :math:`L=1`) creates a quantum
model that can be expressed as a *Fourier series* of the form

.. math::  f_{ \boldsymbol \theta}(x) = \sum_{n \in \Omega} c_{n}(\boldsymbol \theta) e^{i  n x}, 

where :math:`\Omega = \{ -r, \dots, -1, 0, 1, \dots, r\}` is a spectrum
of consecutive integer-valued frequencies up to degree :math:`r`.

As a result, we expect quantum models that encode an input :math:`x` by
:math:`r` Pauli rotations to only be able to fit Fourier series of at
most degree :math:`r`.


.. GENERATED FROM PYTHON SOURCE LINES 111-114

Goal of this demonstration
--------------------------


.. GENERATED FROM PYTHON SOURCE LINES 117-135

The experiments below investigate this "Fourier-series"-like nature of
quantum models by showing how to reproduce the simulations underlying
Figures 3, 4 and 5 in Section II of the paper:

-  **Figures 3 and 4** are function-fitting experiments, where quantum
   models with different encoding strategies have the task to fit
   Fourier series up to a certain degree. As in the paper, we will use
   examples of qubit-based quantum circuits where a single data feature
   is encoded via Pauli rotations.

-  **Figure 5** plots the Fourier coefficients of randomly sampled
   instances from a family of quantum models which is defined by some
   parametrized ansatz.

The code is presented so you can easily modify it in order to play
around with other settings and models. The settings used in the paper 
are given in the various subsections.


.. GENERATED FROM PYTHON SOURCE LINES 138-141

First of all, let's make some imports and define a standard loss
function for the training.


.. GENERATED FROM PYTHON SOURCE LINES 157-160

Part I: Fitting Fourier series with serial Pauli-rotation encoding
------------------------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 163-177

First we will reproduce Figures 3 and 4 from the paper. These
show how quantum models that use Pauli rotations as data-encoding 
gates can only fit Fourier series up to a certain degree. The
degree corresponds to the number of times that the Pauli gate gets
repeated in the quantum model.

Let us consider circuits where the encoding gate gets repeated
sequentially (as in Figure 2a of the paper). For simplicity we will only
look at single-qubit circuits:

.. figure:: ../demonstrations/expressivity_fourier_series/single_qubit_model.png
  :width: 50%
  :align: center


.. GENERATED FROM PYTHON SOURCE LINES 180-183

Define a target function
~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 186-197

We first define a (classical) target function which will be used as a 
"ground truth" that the quantum model has to fit. The target function is 
constructed as a Fourier series of a specific degree.

We also allow for a rescaling of the data by a hyperparameter ``scaling``,
which we will do in the quantum model as well. As shown in [#schuld2020]_, for the quantum model to
learn the classical model in the experiment below,
the scaling of the quantum model and the target function have to match,
which is an important observation for
the design of quantum machine learning models.


.. GENERATED FROM PYTHON SOURCE LINES 215-217

Let's have a look at it.


.. GENERATED FROM PYTHON SOURCE LINES 228-262

.. note:: 

    To reproduce the figures in the paper, you can use the following
    settings in the cells above:

    -  For the settings

       ::

           degree = 1
           coeffs = (0.15 + 0.15j) * degree 
           coeff0 = 0.1

       this function is the ground truth
       :math:`g(x) = \sum_{n=-1}^1 c_{n} e^{-nix}` from Figure 3 in the
       paper.

    -  To get the ground truth :math:`g'(x) = \sum_{n=-2}^2 c_{n} e^{-nix}`
       with :math:`c_0=0.1`, :math:`c_1 = c_2 = 0.15 - 0.15i` from Figure 3,
       you need to increase the degree to two:

       ::

           degree = 2

    -  The ground truth from Figure 4 can be reproduced by changing the
       settings to:

       ::

           degree = 5 
           coeffs = (0.05 + 0.05j) * degree 
           coeff0 = 0.0 


.. GENERATED FROM PYTHON SOURCE LINES 265-268

Define the serial quantum model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 271-273

We now define the quantum model itself.


.. GENERATED FROM PYTHON SOURCE LINES 301-304

You can run the following cell multiple times, each time sampling
different weights, and therefore different quantum models.


.. GENERATED FROM PYTHON SOURCE LINES 317-322

No matter what weights are picked, the single qubit model for `L=1` will always be a sine function 
of a fixed frequency. The weights merely influence the amplitude, y-shift, and phase of the sine.

This observation is formally derived in Section II.A of the paper.


.. GENERATED FROM PYTHON SOURCE LINES 326-331

.. note:: 

    You can increase the number of layers. Figure 4 from the paper, for
    example, uses the settings ``L=1``, ``L=3`` and ``L=5``.


.. GENERATED FROM PYTHON SOURCE LINES 334-336

Finally, let's look at the circuit we just created:


.. GENERATED FROM PYTHON SOURCE LINES 341-344

Fit the model to the target
~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 347-350

The next step is to optimize the weights in order to fit the ground
truth.


.. GENERATED FROM PYTHON SOURCE LINES 378-382

To continue training, you may just run the above cell again. Once you
are happy, you can use the trained model to predict function values, and
compare them with the ground truth.


.. GENERATED FROM PYTHON SOURCE LINES 393-395

Let's also have a look at the cost during training.


.. GENERATED FROM PYTHON SOURCE LINES 404-416

With the initial settings and enough training steps, the quantum model 
learns to fit the ground truth perfectly. This is expected, since 
the number of Pauli-rotation-encoding gates and the degree of the 
ground truth Fourier series are both one.

If the ground truth's degree is larger than the number of layers in the
quantum model, the fit will look much less accurate. And finally, we
also need to have the correct scaling of the data: if one of the models
changes the ``scaling`` parameter (which effectively scales the
frequencies), fitting does not work even with enough encoding
repetitions.


.. GENERATED FROM PYTHON SOURCE LINES 419-428

.. note::

    You will find that the training takes much longer, and needs a lot more steps to converge for 
    larger L. Some initial weights may not even converge to a good solution at all; the training 
    seems to get stuck in a minimum. 

    It is an open research question whether for asymptotically large L, the single qubit 
    model can fit *any* function by constructing arbitrary Fourier coefficients.


.. GENERATED FROM PYTHON SOURCE LINES 431-434

Part II: Fitting Fourier series with parallel Pauli-rotation encoding
---------------------------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 437-457

Our next task is to repeat the function-fitting experiment for a circuit
where the Pauli rotation gate gets repeated :math:`r` times on
*different* qubits, using a single layer :math:`L=1`.

As shown in the paper, we expect similar results to the serial model: a
Fourier series of degree :math:`r` can only be fitted if there are at
least :math:`r` repetitions of the encoding gate in the quantum model.
However, in practice this experiment is a bit harder, since the dimension of the
trainable unitaries :math:`W` grows quickly with the number of qubits.

In the paper, the investigations are made with the assumption that the
purple trainable blocks :math:`W` are arbitrary unitaries. We could use
the :class:`~.pennylane.templates.ArbitraryUnitary` template, but since this
template requires a number of parameters that grows exponentially with
the number of qubits (:math:`4^L-1` to be precise), this quickly becomes
cumbersome to train.

We therefore follow Figure 4 in the paper and use an ansatz for
:math:`W`. 


.. GENERATED FROM PYTHON SOURCE LINES 460-464

.. figure:: ../demonstrations/expressivity_fourier_series/parallel_model.png
  :width: 70%
  :align: center


.. GENERATED FROM PYTHON SOURCE LINES 467-470

Define the parallel quantum model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 473-478

The ansatz is PennyLane's layer structure called
:class:`~.pennylane.templates.StronglyEntanglingLayers`, and as the name suggests, it has itself a
user-defined number of layers (which we will call "ansatz layers" to
avoid confusion).


.. GENERATED FROM PYTHON SOURCE LINES 483-486

Let's have a quick look at the ansatz itself for 3 qubits by making a
dummy circuit of 2 ansatz layers:


.. GENERATED FROM PYTHON SOURCE LINES 502-504

Now we define the actual quantum model.


.. GENERATED FROM PYTHON SOURCE LINES 531-533

Again, you can sample random weights and plot the model function:


.. GENERATED FROM PYTHON SOURCE LINES 546-549

Training the model
~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 552-558

Training the model is done exactly as before, but it may take a lot
longer this time. We set a default of 25 steps, which you should
increase if necessary. Small models of <6 qubits
usually converge after a few hundred steps at mostâ€”but this
depends on your settings.


.. GENERATED FROM PYTHON SOURCE LINES 610-618

.. note:: 

    To reproduce the right column in Figure 4 from the paper, use the 
    correct ground truth, :math:`r=3` and ``trainable_block_layers=3``,
    as well as sufficiently many training steps. The amount of steps 
    depends on the initial weights and other hyperparameters, and 
    in some settings training may not converge to zero error at all.


.. GENERATED FROM PYTHON SOURCE LINES 620-623

Part III: Sampling Fourier coefficients
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 626-637

When we use a trainable ansatz above, it is possible that even with
enough repetitions of the data-encoding Pauli rotation, the quantum
model cannot fit the circuit, since the expressivity of quantum models
also depends on the Fourier coefficients the model can create.

Figure 5 in [#schuld2020]_ shows Fourier coefficients
from quantum models sampled from a model family defined by an 
ansatz for the trainable circuit block. For this we need a
function that numerically computes the Fourier coefficients of a
periodic function f with period :math:`2 \pi`.


.. GENERATED FROM PYTHON SOURCE LINES 649-652

Define your quantum model
~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 655-660

Now we need to define a quantum model. This could be any model, using a
qubit or continuous-variable circuit, or one of the quantum models from
above. We will use a slight derivation of the ``parallel_qubit_model()``
from above, this time using the :class:`~.pennylane.templates.BasicEntanglerLayers` ansatz:


.. GENERATED FROM PYTHON SOURCE LINES 689-692

It will also be handy to define a function that samples different random
weights of the correct size for the model.


.. GENERATED FROM PYTHON SOURCE LINES 700-704

Now we can compute the first few Fourier coefficients for samples from
this model. The samples are created by randomly sampling different
parameters using the ``random_weights()`` function.


.. GENERATED FROM PYTHON SOURCE LINES 726-730

Let's plot the real vs. the imaginary part of the coefficients. As a
sanity check, the :math:`c_0` coefficient should be real, and therefore
have no contribution on the y-axis.


.. GENERATED FROM PYTHON SOURCE LINES 749-761

Playing around with different quantum models, you will find
that some quantum models create different distributions over
the coefficients than others. For example ``BasicEntanglingLayers``
(with the default Pauli-X rotation) seems to have a structure
that forces the even Fourier coefficients to zero, while
``StronglyEntanglingLayers`` will have a non-zero variance
for all supported coefficients.

Note also how the variance of the distribution decreases for growing
orders of the coefficientsâ€”an effect linked to the convergence of a
Fourier series.


.. GENERATED FROM PYTHON SOURCE LINES 764-772

.. note::

    To reproduce the results from Figure 5 you have to change the ansatz (no
    unitary, ``BasicEntanglerLayers`` or ``StronglyEntanglingLayers``, and
    set ``n_ansatz_layers`` either to :math:`1` or :math:`5`). The
    ``StronglyEntanglingLayers`` requires weights of shape
    ``size=(2, n_ansatz_layers, n_qubits, 3)``.


.. GENERATED FROM PYTHON SOURCE LINES 775-784

Continuous-variable model
~~~~~~~~~~~~~~~~~~~~~~~~~

Ref. [#schuld2020]_ mentions that a phase rotation in
continuous-variable quantum computing has a spectrum that supports *all*
Fourier frequecies. To play with this model, we finally show you the
code for a continuous-variable circuit. For example, to see its Fourier
coefficients run the cell below, and then re-run the two cells above.


.. GENERATED FROM PYTHON SOURCE LINES 809-820

.. note:: 

    To find out what effect so-called "non-Gaussian" gates like the 
    ``Kerr`` gate have, you need to install the 
    `strawberryfields plugin <https://pennylane-sf.readthedocs.io/en/latest/>`_ 
    and change the device to 

    .. code-block:: python

        dev_cv = qml.device('strawberryfields.fock', wires=1, cutoff_dim=50)


.. GENERATED FROM PYTHON SOURCE LINES 823-837

References
---------------

.. [#schuld2020] 

    Maria Schuld, Ryan Sweke, and Johannes Jakob Meyer. "The effect of data encoding on
    the expressive power of variational quantum machine learning models." 
    `arXiv:2008.08605 <https://arxiv.org/abs/2008.08605>`__ (2020).


About the authors
-----------------
.. include:: ../_static/authors/maria_schuld.txt

.. include:: ../_static/authors/johannes_jakob_meyer.txt


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_demos_tutorial_expressivity_fourier_series.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_expressivity_fourier_series.py <tutorial_expressivity_fourier_series.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_expressivity_fourier_series.ipynb <tutorial_expressivity_fourier_series.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
