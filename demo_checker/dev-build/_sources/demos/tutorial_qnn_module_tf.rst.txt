
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "demos/tutorial_qnn_module_tf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_demos_tutorial_qnn_module_tf.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_demos_tutorial_qnn_module_tf.py:


Turning quantum nodes into Keras Layers
=======================================

.. meta::
    :property="og:description": Learn how to create hybrid ML models in PennyLane using Keras
    :property="og:image": https://pennylane.ai/qml/_images/Keras_logo.png

.. related::

   tutorial_qnn_module_torch Turning quantum nodes into Torch Layers

*Author: Tom Bromley â€” Posted: 02 November 2020. Last updated: 28 January 2021.*

Creating neural networks in `Keras <https://keras.io/>`__ is easy. Models are constructed from
elementary *layers* and can be trained using a high-level API. For example, the following code
defines a two-layer network that could be used for binary classification:

.. GENERATED FROM PYTHON SOURCE LINES 31-53

The model can then be trained using `model.fit()
<https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit>`__.

**What if we want to add a quantum layer to our model?** This is possible in PennyLane:
:doc:`QNodes <../glossary/hybrid_computation>` can be converted into Keras layers and combined
with the wide range of built-in classical
`layers <https://www.tensorflow.org/api_docs/python/tf/keras/layers>`__ to create truly hybrid
models. This tutorial will guide you through a simple example to show you how it's done!

.. note::

    A similar demo explaining how to
    :doc:`turn quantum nodes into Torch layers <tutorial_qnn_module_torch>`
    is also available.

Fixing the dataset and problem
------------------------------

Let us begin by choosing a simple dataset and problem to allow us to focus on how the hybrid
model is constructed. Our objective is to classify points generated from scikit-learn's
binary-class
`make_moons() <https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_moons.html>`__ dataset:

.. GENERATED FROM PYTHON SOURCE LINES 53-70

.. code-block:: default






    # Set random seeds


















.. GENERATED FROM PYTHON SOURCE LINES 71-82

Defining a QNode
----------------

Our next step is to define the QNode that we want to interface with Keras. Any combination of
device, operations and measurements that is valid in PennyLane can be used to compose the
QNode. However, the QNode arguments must satisfy additional :doc:`conditions
<code/api/pennylane.qnn.KerasLayer>` including having an argument called ``inputs``. All other
arguments must be arrays or tensors and are treated as trainable weights in the model. We fix a
two-qubit QNode using the
:doc:`default.qubit <code/api/pennylane.devices.default_qubit.DefaultQubit>` simulator and
operations from the :doc:`templates <introduction/templates>` module.

.. GENERATED FROM PYTHON SOURCE LINES 95-109

Interfacing with Keras
----------------------

With the QNode defined, we are ready to interface with Keras. This is achieved using the
:class:`~pennylane.qnn.KerasLayer` class of the :mod:`~pennylane.qnn` module, which converts the
QNode to the elementary building block of Keras: a *layer*. We shall see in the following how the
resultant layer can be combined with other well-known neural network layers to form a hybrid
model.

We must first define the ``weight_shapes`` dictionary. Recall that all of
the arguments of the QNode (except the one named ``inputs``) are treated as trainable
weights. For the QNode to be successfully converted to a layer in Keras, we need to provide the
details of the shape of each trainable weight for them to be initialized. The ``weight_shapes``
dictionary maps from the argument names of the QNode to corresponding shapes:

.. GENERATED FROM PYTHON SOURCE LINES 114-119

In our example, the ``weights`` argument of the QNode is trainable and has shape given by
``(n_layers, n_qubits)``, which is passed to
:func:`~pennylane.templates.layers.BasicEntanglerLayers`.

Now that ``weight_shapes`` is defined, it is easy to then convert the QNode:

.. GENERATED FROM PYTHON SOURCE LINES 123-144

With this done, the QNode can now be treated just like any other Keras layer and we can proceed
using the familiar Keras workflow.

Creating a hybrid model
-----------------------

Let's create a basic three-layered hybrid model consisting of:

1. a 2-neuron fully connected classical layer
2. our 2-qubit QNode converted into a layer
3. another 2-neuron fully connected classical layer
4. a softmax activation to convert to a probability vector

A diagram of the model can be seen in the figure below.

.. figure:: /demonstrations/qnn_module/qnn_keras.png
   :width: 100%
   :align: center

We can construct the model using the
`Sequential <https://www.tensorflow.org/api_docs/python/tf/keras/Sequential>`__ API:

.. GENERATED FROM PYTHON SOURCE LINES 150-157

Training the model
------------------

We can now train our hybrid model on the classification dataset using the usual Keras
approach. We'll use the
standard `SGD <https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/SGD>`__ optimizer
and the mean absolute error loss function:

.. GENERATED FROM PYTHON SOURCE LINES 162-166

Note that there are more advanced combinations of optimizer and loss function, but here we are
focusing on the basics.

The model is now ready to be trained!

.. GENERATED FROM PYTHON SOURCE LINES 170-201

How did we do? The model looks to have successfully trained and the accuracy on both the
training and validation datasets is reasonably high. In practice, we would aim to push the
accuracy higher by thinking carefully about the model design and the choice of hyperparameters
such as the learning rate.

Creating non-sequential models
------------------------------

The model we created above was composed of a sequence of classical and quantum layers. This
type of model is very common and is suitable in a lot of situations. However, in some cases we
may want a greater degree of control over how the model is constructed, for example when we
have multiple inputs and outputs or when we want to distribute the output of one layer into
multiple subsequent layers.

Suppose we want to make a hybrid model consisting of:

1. a 4-neuron fully connected classical layer
2. a 2-qubit quantum layer connected to the first two neurons of the previous classical layer
3. a 2-qubit quantum layer connected to the second two neurons of the previous classical layer
4. a 2-neuron fully connected classical layer which takes a 4-dimensional input from the
   combination of the previous quantum layers
5. a softmax activation to convert to a probability vector

A diagram of the model can be seen in the figure below.

.. figure:: /demonstrations/qnn_module/qnn2_keras.png
   :width: 100%
   :align: center

This model can also be constructed using the `Functional API
<https://keras.io/guides/functional_api/>`__:

.. GENERATED FROM PYTHON SOURCE LINES 201-219

.. code-block:: default


    # re-define the layers





    # construct the model

















.. GENERATED FROM PYTHON SOURCE LINES 220-221

As a final step, let's train the model to check if it's working:

.. GENERATED FROM PYTHON SOURCE LINES 228-231

Great! We've mastered the basics of constructing hybrid classical-quantum models using
PennyLane and Keras. Can you think of any interesting hybrid models to construct? How do they
perform on realistic datasets?

.. GENERATED FROM PYTHON SOURCE LINES 233-235

About the author
----------------
.. include:: ../_static/authors/thomas_bromley.txt


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.001 seconds)


.. _sphx_glr_download_demos_tutorial_qnn_module_tf.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_qnn_module_tf.py <tutorial_qnn_module_tf.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_qnn_module_tf.ipynb <tutorial_qnn_module_tf.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
