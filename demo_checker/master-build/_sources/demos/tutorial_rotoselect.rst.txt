
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "demos/tutorial_rotoselect.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_demos_tutorial_rotoselect.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_demos_tutorial_rotoselect.py:


.. _rotoselect:

Quantum circuit structure learning
==================================

.. meta::
    :property="og:description": Applying the Rotoselect optimization algorithm to find the minimum in
        a variational quantum algorithm.
    :property="og:image": https://pennylane.ai/qml/_images/rotoselect_structure.png

.. related::

   tutorial_vqe A brief overview of VQE
   tutorial_vqe_qng Accelerating VQEs with quantum natural gradient
   tutorial_rosalin Frugal shot optimization with Rosalin

*Author: Angus Lowe — Posted: 16 October 2019. Last updated: 20 January 2021.*

.. GENERATED FROM PYTHON SOURCE LINES 23-126

This example shows how to learn a good selection of rotation
gates so as to minimize a cost
function using the Rotoselect algorithm of `Ostaszewski et al.
(2019) <https://arxiv.org/abs/1905.09692>`__. We apply this algorithm to minimize a Hamiltonian for a
variational quantum eigensolver (VQE) problem,
and improve upon an initial circuit structure ansatz.

.. note::

    The Rotoselect and Rotosolve algorithms are directly implemented and
    available in PennyLane via the optimizers :class:`~.pennylane.RotoselectOptimizer`
    and :class:`~.pennylane.RotosolveOptimizer`, respectively.

Background
----------

In quantum machine learning and optimization problems,
one wishes to minimize a cost function with respect to some parameters in the circuit. It is desirable
to keep the circuit as shallow as possible to reduce the effects of noise, but an arbitrary
choice of gates is generally suboptimal for performing the optimization.
Therefore, it would be useful to employ an
algorithm which learns a good circuit structure at fixed depth to minimize the cost function.

Furthermore, PennyLane's optimizers perform automatic differentiation of quantum nodes by evaluating phase-shifted
expectation values using the quantum circuit itself.
The output of these calculations, the gradient, is used in optimization methods to minimize
the cost function. However,
there exists a technique to discover the optimal parameters of a quantum circuit through phase-shifted evaluations,
without the need for calculating the gradient as an intermediate step (i.e., a gradient-free optimization).
It could be desirable, in some cases, to
take advantage of this.


The Rotoselect algorithm addresses the above two points: it allows one to jump directly to the
optimal value for a single parameter
with respect to fixed values for the other parameters, skipping gradient descent, and tries various
rotation gates along the way.
The algorithm works by updating the parameters :math:`\boldsymbol{\theta}=\theta_1,\dots,\theta_D` and gate choices
:math:`\boldsymbol{R}=R_1,\dots,R_D`
one at a time according to a *closed-form expression* for the optimal value of the :math:`d^{\text{th}}` parameter
:math:`\theta^{*}_d` when the other parameters and gate choices are fixed:

.. math::

  \theta^{*}_d &= \underset{\theta_d}{\text{argmin}} \langle H \rangle_{\theta_d} \\
               &= -\frac{\pi}{2} - \text{arctan}\left(\frac{2\langle H \rangle_{\theta_d = 0} -
               \langle H \rangle_{\theta_d=\pi/2} - \langle H \rangle_{\theta_d=-\pi/2}}{\langle
               H \rangle_{\theta_d=\pi/2} -
               \langle H \rangle_{\theta_d=-\pi/2}}\right)

The calculation makes use of 3 separate evaluations
of the expectation value :math:`\langle H \rangle_{\theta_d}` using the quantum circuit. Although
:math:`\langle H \rangle` is really a function of all parameters and gate choices
(:math:`\boldsymbol{\theta}`, :math:`\boldsymbol{R}`), we
are fixing every parameter and gate choice apart from :math:`\theta_d` in this expression so we write it as
:math:`\langle H \rangle = \langle H \rangle_{\theta_d}`.
For each parameter in the quantum circuit, the algorithm proceeds by evaluating :math:`\theta^{*}_d`
for each choice of
gate :math:`R_d \in \{R_x,R_y,R_z\}` and selecting the gate which yields the minimum value of
:math:`\langle H \rangle`.

Thus, one might expect the number of circuit evaluations required to be 9 for each parameter (3 for each gate
choice). However, since all 3 rotation gates yield identity when :math:`\theta_d=0`,

.. math:: R_x(0) = R_y(0) = R_z(0) = 1,

the value of :math:`\langle H \rangle_{\theta_d=0}` in the expression for :math:`\theta_d^{*}` above
is the same for each of the gate choices, and this 3-fold
degeneracy reduces the number of evaluations required to 7.

One cycle of the Rotoselect algorithm involves
iterating through every parameter and performing the calculation above.
This cycle is repeated for a fixed number of steps or until convergence. In this way, one could learn both
the optimal parameters and gate choices for the task of minimizing
a given cost function. Next, we present an example of this algorithm
applied to a VQE Hamiltonian.

Example VQE Problem
-------------------

We focus on a 2-qubit VQE circuit for simplicity. Here, the Hamiltonian
is

.. math::
  H = 0.5Y_2 + 0.8Z_1 - 0.2X_1

where the subscript denotes the qubit upon which the Pauli operator acts. The
expectation value of this quantity acts as the cost function for our
optimization.

Rotosolve
---------
As a precursor to implementing Rotoselect we can analyze a version of the algorithm
which does not optimize the choice of gates and only optimizes the parameters for a given circuit ansatz,
called Rotosolve. Later, we will build on this example
to implement Rotoselect and vary the circuit structure.

Imports
~~~~~~~
To get started, we import PennyLane and the PennyLane-wrapped version of NumPy. We also
create a 2-qubit device using the ``lightning.qubit`` plugin and set the ``analytic`` keyword to ``True``
in order to obtain exact values for any expectation values calculated. In contrast to real
devices, simulators have the capability of doing these calculations without sampling.

.. GENERATED FROM PYTHON SOURCE LINES 135-147

Creating a fixed quantum circuit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. figure:: ../demonstrations/rotoselect/original_ansatz.png
   :scale: 65%
   :align: center
   :alt: original_ansatz

|

Next, we set up a circuit with a fixed ansatz structure—which will later be subject to change—and encode
the Hamiltonian into a cost function. The structure is shown in the figure above.

.. GENERATED FROM PYTHON SOURCE LINES 174-179

Helper methods for the algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We define methods to evaluate
the expression in the previous section. These will serve as the basis for
our optimization algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 179-205

.. code-block:: default


    # calculation as described above

















    # one cycle of rotosolve













.. GENERATED FROM PYTHON SOURCE LINES 206-211

Optimization and comparison with gradient descent
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We set up some initial parameters for the :math:`R_x` and :math:`R_y`
gates in the ansatz circuit structure and perform an optimization using the
Rotosolve algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 223-230

We then compare the results of Rotosolve to an optimization
performed with gradient descent and plot
the cost functions at each step (or cycle in the case of Rotosolve).
This comparison is fair since the number of circuit
evaluations involved in a cycle of Rotosolve is similar to those required to calculate
the gradient of the circuit and step in this direction. Evidently, the Rotosolve algorithm
converges on the minimum after the first cycle for this simple circuit.

.. GENERATED FROM PYTHON SOURCE LINES 230-258

.. code-block:: default










    # plot cost function optimization using the 2 techniques

























.. GENERATED FROM PYTHON SOURCE LINES 259-263

Cost function surface for circuit ansatz
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now, we plot the cost function surface for later comparison with the surface generated
by learning the circuit structure.

.. GENERATED FROM PYTHON SOURCE LINES 284-313

It is apparent that, based on the circuit structure
chosen above, the cost function does not depend on the angle parameter :math:`\theta_2`
for the rotation gate :math:`R_y`. As we will show in the following sections, this independence is not true
for alternative gate choices.

Rotoselect
----------

.. figure:: ../demonstrations/rotoselect/rotoselect_structure.png
   :scale: 65%
   :align: center
   :alt: rotoselect_structure

|

We now implement the Rotoselect algorithm to learn a good selection of gates to minimize
our cost function. The structure is similar to the original ansatz, but the generators of rotation are
selected from the set of Pauli gates :math:`P_d \in \{X,Y,Z\}` as shown in the figure above. For example,
:math:`U(\theta,Z) = R_z(\theta)`.

Creating a quantum circuit with variable gates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First, we set up a quantum circuit with a similar structure to the one above, but
instead of fixed rotation gates :math:`R_x` and :math:`R_y`, we allow the gates to be specified with the
``generators`` keyword, which is a list of the generators of rotation that will be used for the gates in the circuit.
For example, ``generators=['X', 'Y']`` reproduces the original circuit ansatz used in the Rotosolve example
above.
A helper method ``RGen`` returns the correct unitary gate according to the
rotation specified by an element of ``generators``.

.. GENERATED FROM PYTHON SOURCE LINES 349-353

Helper methods
~~~~~~~~~~~~~~
We define helper methods in a similar fashion to Rotosolve. In this case,
we must iterate through the possible gate choices in addition to optimizing each parameter.

.. GENERATED FROM PYTHON SOURCE LINES 390-397

Optimizing the circuit structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We perform the optimization and print the optimal generators for the rotation gates. The minimum value of the
cost function obtained by optimizing using Rotoselect is less than the minimum value of the cost function obtained by
gradient descent or Rotosolve, which were performed on the original circuit structure ansatz.
In other words, Rotoselect performs better without
increasing the depth of the circuit by selecting better gates for the task of minimizing the cost function.

.. GENERATED FROM PYTHON SOURCE LINES 397-425

.. code-block:: default












    # plot cost function vs. steps comparison























.. GENERATED FROM PYTHON SOURCE LINES 426-439

Cost function surface for learned circuit structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. figure:: ../demonstrations/rotoselect/learned_structure.png
   :scale: 65%
   :align: center
   :alt: learned_structure

|

Finally, we plot the cost function surface for the newly discovered optimized
circuit structure shown in the figure above. It is apparent from the minima in the plot that
the new circuit structure is better suited for the problem.

.. GENERATED FROM PYTHON SOURCE LINES 439-458

.. code-block:: default








    # plot cost for fixed optimal generators


















.. GENERATED FROM PYTHON SOURCE LINES 459-464

References
----------

1. Mateusz Ostaszewski, Edward Grant, Marcello Bendetti. "Quantum circuit structure learning."
   `arxiv:1905.09692 <https://arxiv.org/abs/1905.09692>`__, 2019.

.. GENERATED FROM PYTHON SOURCE LINES 466-469

About the author
----------------
.. include:: ../_static/authors/angus_lowe.txt


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.001 seconds)


.. _sphx_glr_download_demos_tutorial_rotoselect.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_rotoselect.py <tutorial_rotoselect.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_rotoselect.ipynb <tutorial_rotoselect.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
