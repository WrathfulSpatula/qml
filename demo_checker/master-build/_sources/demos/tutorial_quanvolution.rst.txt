
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "demos/tutorial_quanvolution.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_demos_tutorial_quanvolution.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_demos_tutorial_quanvolution.py:


.. _quanvolution:

Quanvolutional Neural Networks
==============================

.. meta::
    :property="og:description": Train a quantum convolutional neural network
        to classify MNIST images.
    :property="og:image": https://pennylane.ai/qml/_images/circuit.png

*Author: Andrea Mari â€” Posted: 24 March 2020. Last updated: 15 January 2021.*

In this demo we implement the *Quanvolutional Neural Network*, a quantum
machine learning model originally introduced in
`Henderson et al. (2019) <https://arxiv.org/abs/1904.04767>`_.

.. figure:: ../demonstrations/quanvolution/circuit.png
    :align: center
    :width: 90%
    :target: javascript:void(0)

Introduction
------------

Classical convolution
^^^^^^^^^^^^^^^^^^^^^
The *convolutional neural network* (CNN) is a standard model in classical machine learning which is particularly
suitable for processing images.
The model is based on the idea of a *convolution layer* where, instead of processing the full input data with a global function,
a local convolution is applied.

If the input is an image, small local regions are sequentially processed with the same kernel. The results obtained for each region are usually associated to different channels
of a single output pixel. The union of all the output pixels produces a new image-like object, which can be further processed by
additional layers.


Quantum convolution
^^^^^^^^^^^^^^^^^^^
One can extend the same idea also to the context of quantum variational circuits. A possible approach is given
by the following procedure which is very similar to the one used in Ref. [1]. The scheme is also represented in the
figure at the top of this tutorial.


1.  A small region of the input image, in our example a :math:`2 \times 2` square, is embedded into a quantum circuit.
    In this demo, this is achieved with parametrized rotations applied to the qubits initialized in the ground state.

2.  A quantum computation, associated to a unitary :math:`U`, is performed on the system.
    The unitary could be generated by a variational quantum circuit or, more simply, by a random circuit as
    proposed in Ref. [1].

3.  The quantum system is finally measured, obtaining a list of classical expectation values.
    The measurement results could also be classically post-processed as proposed in Ref. [1] but, for simplicity, in this
    demo we directly use the raw expectation values.

4.  Analogously to a classical convolution layer, each expectation value is mapped to a different channel of a
    single output pixel.

5.  Iterating the same procedure over different regions, one can scan the full input image,
    producing an output object which will be structured as a multi-channel image.

6.  The quantum convolution can be followed by further quantum layers or by classical layers.


The main difference with respect to a classical convolution is that a quantum circuit can
generate highly complex kernels whose computation could be, at least in principle, classically intractable.

.. note::
    In this tutorial we follow the approach of Ref. [1] in which a fixed non-trainable quantum
    circuit is used as a "quanvolution" kernel, while the subsequent classical layers
    are trained for the classification problem of interest.
    However, by leveraging the ability of PennyLane to evaluate gradients of
    quantum circuits, the quantum kernel could also be trained.


General setup
-------------
This Python code requires *PennyLane* with the *TensorFlow* interface and the plotting library *matplotlib*.

.. GENERATED FROM PYTHON SOURCE LINES 89-91

Setting of the main hyper-parameters of the model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 103-108

Loading of the MNIST dataset
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We import the MNIST dataset from *Keras*. To speedup the evaluation of this demo
we use only a small number of training and test images. Obviously, better
results are achievable when using the full dataset.

.. GENERATED FROM PYTHON SOURCE LINES 108-127

.. code-block:: default





    # Reduce dataset size





    # Normalize pixel values within 0 and 1



    # Add extra dimension for convolution channels











.. GENERATED FROM PYTHON SOURCE LINES 128-142

Quantum circuit as a convolution kernel
---------------------------------------

We follow the scheme described in the introduction and represented in the figure at the top
of this demo.

We initialize a PennyLane ``default.qubit`` device, simulating a system of :math:`4` qubits.
The associated ``qnode`` represents the quantum circuit consisting of:

1. an embedding layer of local :math:`R_y` rotations (with angles scaled by a factor of :math:`\pi`);

2. a random circuit of ``n_layers``;

3. a final measurement in the computational basis, estimating :math:`4` expectation values.

.. GENERATED FROM PYTHON SOURCE LINES 142-161

.. code-block:: default




    # Random circuit parameters






















.. GENERATED FROM PYTHON SOURCE LINES 162-175

The next function defines the convolution scheme:

1. the image is divided into squares of :math:`2 \times 2` pixels;

2. each square is processed by the quantum circuit;

3. the :math:`4` expectation values are mapped into :math:`4` different
   channels of a single output pixel.

.. note::
      This process halves the resolution of the input image. In the
      standard language of CNN, this would correspond to a convolution
      with a :math:`2 \times 2` *kernel* and a *stride* equal to :math:`2`.

.. GENERATED FROM PYTHON SOURCE LINES 200-211

Quantum pre-processing of the dataset
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Since we are not going to train the quantum convolution layer, it is more
efficient to apply it as a "pre-processing" layer to all the images of our dataset.
Later an entirely classical model will be directly trained and tested on the
pre-processed dataset, avoiding unnecessary repetitions of quantum computations.

The pre-processed images will be saved in the folder ``SAVE_PATH``.
Once saved, they can be directly loaded by setting ``PREPROCESS = False``,
otherwise the quantum convolution is evaluated at each run of the code.

.. GENERATED FROM PYTHON SOURCE LINES 211-236

.. code-block:: default






















    # Load pre-processed images










.. GENERATED FROM PYTHON SOURCE LINES 237-239

Let us visualize the effect of the quantum convolution
layer on a batch of samples:

.. GENERATED FROM PYTHON SOURCE LINES 260-267

Below each input image, the :math:`4` output channels generated by the
quantum convolution are visualized in gray scale.

One can clearly notice the downsampling of the resolution and
some local distortion introduced by the quantum kernel.
On the other hand the global shape of the image is preserved,
as expected for a convolution layer.

.. GENERATED FROM PYTHON SOURCE LINES 269-281

Hybrid quantum-classical model
------------------------------

After the application of the quantum convolution layer we feed the resulting
features into a classical neural network that will be trained to classify
the :math:`10` different digits of the MNIST dataset.

We use a very simple model: just a fully connected layer with
10 output nodes with a final *softmax* activation function.

The model is compiled with a *stochastic-gradient-descent* optimizer,
and a *cross-entropy* loss function.

.. GENERATED FROM PYTHON SOURCE LINES 300-305

Training
^^^^^^^^

We first initialize an instance of the model, then we train and validate
it with the dataset that has been already pre-processed by a quantum convolution.

.. GENERATED FROM PYTHON SOURCE LINES 318-321

In order to compare the results achievable with and without the quantum convolution layer,
we initialize also a "classical" instance of the model that will be directly trained
and validated with the raw MNIST images (i.e., without quantum pre-processing).

.. GENERATED FROM PYTHON SOURCE LINES 335-340

Results
^^^^^^^

We can finally plot the test accuracy and the test loss with respect to the
number of training epochs.

.. GENERATED FROM PYTHON SOURCE LINES 364-374

References
----------

1. Maxwell Henderson, Samriddhi Shakya, Shashindra Pradhan, Tristan Cook.
   "Quanvolutional Neural Networks: Powering Image Recognition with Quantum Circuits."
   `arXiv:1904.04767 <https://arxiv.org/abs/1904.04767>`__, 2019.


About the author
----------------
.. include:: ../_static/authors/andrea_mari.txt


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.001 seconds)


.. _sphx_glr_download_demos_tutorial_quanvolution.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_quanvolution.py <tutorial_quanvolution.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_quanvolution.ipynb <tutorial_quanvolution.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
